# don't send the nginx version number in error pages and Server header
server_tokens off;

# config to don't allow the browser to render the page inside an frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;


# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;


# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
# you can tell the browser that it can only download content from the domains you explicitly allow
# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
# directives for css and js(if you have inline css or js, you will need to keep it too).
# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://cdnjs.cloudflare.com code.jquery.com https://ssl.google-analytics.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://themes.googleusercontent.com; frame-src https://https://www.facebook.com https://s-static.ak.facebook.com; object-src 'none'";

## gzip conf
gzip on;
gzip_disable "msie6";

gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_min_length 256;
gzip_types text/plain text/css application/json application/javascript  application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

upstream apiserver{
    least_conn;
    server server1 weight=10 max_fails=3 fail_timeout=30s;
    server server2 weight=10 max_fails=3 fail_timeout=30s;
    server server3 weight=10 max_fails=3 fail_timeout=30s;
    server server4 weight=10 max_fails=3 fail_timeout=30s;
    server server5 weight=10 max_fails=3 fail_timeout=30s;
}


# Expires map
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   max;
    application/javascript     max;
    ~image/                    max;
}

server {
    listen 80;
    listen [::]:80;

    location = /stub_status {
        allow 192.168.3.0/24;
        allow 192.168.0.0/24;
        allow 172.24.0.1;
        deny all;
        stub_status on;
    }

    # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    # disabling http2 because error on react-native v0.45 and below
    listen 443 ssl http2 deferred;
    listen [::]:443 ssl http2 deferred;

    expires $expires;

    # HTTP1.1 conf
    #listen 443 ssl default deferred;
    #listen [::]:443 ssl default deferred;

    #server_name app.senati.edu.pe;

    # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
    # also https://hstspreload.org/
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

    proxy_http_version 1.1;
    proxy_hide_header X-powered-by;
    proxy_cache_bypass $http_upgrade;

    proxy_set_header Host $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-Host $server_name;

    gzip_static  on;
    gzip_proxied expired no-cache no-store private auth;

    # SSL main configuration

    ssl_certificate /opt/senati_edu_pe.pem;
    ssl_certificate_key /opt/senati_edu_pe.key;
    ssl_trusted_certificate /opt/DigiCertCA.crt;

    # enable session resumption to improve https performance
    # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;

    #### SSLabs A+ recomendation for Ngnix #####

    # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # ciphers chosen for forward secrecy and compatibility
    # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html

    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam /opt/dhparam.pem;

    # OCSP Stapling
    ssl_stapling off;
    ssl_stapling_verify off;

    # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
    # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
    #resolver 8.8.8.8 8.8.4.4 valid=300s;
    #resolver 192.168.0.13 ipv6=off;
    #resolver_timeout 5s;

    ### END SSL MAIN CONFIG ###

    error_page 404  /404.html;

    location / {
        root   /usr/share/nginx/html;
        index  landing.html index.html index.htm;
    }

    location /landing.html {
        root   /usr/share/nginx/html;
        index landing.html;
    }

    location /img/ {
        root   /usr/share/nginx/html;
        try_files $uri $uri/ =404;
        sendfile on;
        sendfile_max_chunk 1m;
        tcp_nopush on;
    }

    location = /404.html {
        root  /usr/share/nginx/html/;
    }

    # redirect to API nodejs server
    location ~* /web {
        # auth_basic "Administrator Area";
        # auth_basic_user_file /etc/nginx/.htpasswd;
        proxy_redirect off;
        proxy_pass http://webapp;

        rewrite ^/web(/.*) $1 break;
    }

    location ~* /api/v1 {
        proxy_redirect off;
        proxy_pass http://apiserver;

        rewrite ^/api/v1/documentation / break;
        rewrite ^/api/v1/swagger.json  / break;
        rewrite ^/api/v1(/.*) $1 break;
    }

    # redirect to API nodejs server
    location ~* /api/v2 {
        proxy_redirect off;
        proxy_pass http://apiserver;

        rewrite ^/api/v2/documentation / break;
        rewrite ^/api/v2/swagger.json  / break;
        rewrite ^/api/v2(/.*) $1 break;
    }

    # image proxy
    location ~* /api/imageproxy/ {
        # pattern match to capture the original URL to prevent URL
        # canonicalization, which would strip double slashes
        if ($request_uri ~ "/api/imageproxy/(.+)") {
            set $path $1;
            rewrite .* /$path break;
        }
        proxy_pass http://imageproxy;
    }

}
